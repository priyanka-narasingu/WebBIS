
$(function() {
    //Binding the search text box to listen to input-to enable button (>3 char)
    $("#search").bind("input", function(event) {
        event.preventDefault();
        setSearchBtnState();
    });


//$("#searchBtn").on("click", searchFor());
    $("#searchBtn").click(function(event) {
        event.preventDefault();
        searchFor();
    });
    
     $("#refreshBtn").click(function(event) {
        event.preventDefault();
        populate();
    });
});   
    
    populate();
    function setSearchBtnState(){
    
        if($("#search").val().length >3){
            $("#searchBtn").prop("disabled", false);
        }
        else{
            $("#searchBtn").prop("disabled", true);
        } 
    }

// to perform search by product 
function searchFor(){
    
    //returns search string and parse into an object to ready for JSON
    var searchString = $("#search").val();

        
    
        var promise = $.post("ReplenishStock", {search: searchString});
        //var promise = $.post("ReplenishStock", {search: searchString, searchByType: searchBy});
        promise.done(function(data){
            if (!data){
                return;
            }
            document.getElementById("replenishDiv").innerHTML="";
      
            populateTable(data);
        });
        
        
        promise.fail(function(){
            
            document.getElementById("replenishDiv").innerHTML="Cannot find " + searchBy + " " + searchString;
            
        });                   
} 

function populate(){

        $.ajax({
        url:"ReplenishStock",
        type: "POST",
        //data : JSON.stringify(queryFor),
        data: {search: null, searchByType: null},
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function(data){
            //alert("hello");
            populateTable(data);
        },
        failure: function(errMsg) {
            alert(errMsg);
        }
    });       
}

//populates the table based on data returned from servlet
function populateTable(data) {
    // TODO: Implement code to generate table (via JQuery)
    
    
    
    var arrayOfHeaders = data["headers"];
    var arrayOfInventories = data["inventory"];
 //   $("#stock-table-div").text(JSON.stringify(arrayOfProducts));
    
    var $table = $("<table>");
    $($table).prop("cellpadding", "10");
    $($table).prop("border", "1");
    var tr = $('<tr/>');
    
    //populates the table headers
    for (var i = 0; i < arrayOfHeaders.length; i++) {
        tr.append("<th>" + arrayOfHeaders[i].header + "</th>");
        $table.append(tr);  
    }   

    document.getElementById("replenishDiv").innerHTML=""; //clears the previous table if any
    //console.log("clear productdiv");
    $("#replenishDiv").append($($table));
    
    //populates the table based on array of products that servlet returns
    
    var partNum = [];
    //var desc = [];
    //var mfrID =[];
    //var mfrName=[];
    //var unitP = [];
    
    for (var i = 0; i < arrayOfInventories.length; i++) {
        var tr = $('<tr/>');
        
        partNum.push(arrayOfInventories[i].partnumber);
        //desc.push(arrayOfProducts[i].description);
        //mfrID.push(arrayOfProducts[i].manufacturerid);
       // mfrName.push(arrayOfProducts[i].manufacturername);
        //unitP.push(arrayOfProducts[i].unitprice);
        
        tr.append("<td>" + arrayOfInventories[i].partnumber + "</td>");
        tr.append("<td>" + arrayOfInventories[i].unitprice + "</td>"); //new
        tr.append("<td>" + arrayOfInventories[i].quantity + "</td>");
        tr.append("<td>" + arrayOfInventories[i].reorderpoint + "</td>");
        tr.append("<td>" + arrayOfInventories[i].minreorderqty + "</td>");
        tr.append("<td>" + arrayOfInventories[i].orderamount + "</td>");
        tr.append("<td>" + arrayOfInventories[i].price + "</td>");
        //tr.append("<td>" + arrayOfInventories[i].shelflocation + "</td>");        
        //tr.append("<td>" + arrayOfInventories[i].damageditemscount + "</td>");
        
        //adds the edit buttons to each row item
        //var pNum = arrayOfInventories[i].partnumber;
        //var $editBtn = $("<button>");
        //$($editBtn).text("Select for Edit");
        //$($editBtn).prop("id", "edit-" + pNum);
        
       // $($editBtn).prop("id", i);
        
        // sets edit buttons to listen to clicks and logs the productID
       /* $($editBtn).on("click", function(event) {
           event.preventDefault();
           var myID = $(this).prop("id");
           console.log(myID);
           $("#editpartnumber").val(partNum[myID]);
           $("#editdescription").val(desc[myID]);
           $("#editmanufacturerid").val(mfrID[myID]);
           $("#editunitprice").val(unitP[myID]);     
           //window.location.hash="top";
           
           //enables the edit(save) button
           $("#editProductBtn").prop("disabled", false);
           $("#addProductBtn").prop("disabled", false);
           $("#delProductBtn").prop("disabled", false);
                     
        });
        tr.append($editBtn);        */
        
//        tr.append("<td>" + "<button id='edit-" + arrayOfProducts[i].partnumber + "'>Edit</button>" +"</td>");
//        tr.append("<td>" + "<button id='delete-" + arrayOfProducts[i].partnumber + "'>Delete</button>"+"</td>");
                
        $table.append(tr);
        
    }    
}

    